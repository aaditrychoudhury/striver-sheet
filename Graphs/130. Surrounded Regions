class Solution {
    private:
    void dfs(int r,int c,vector<vector<int>> &vis,vector<vector<char>> &board){
        vis[r][c] = 1;
        int n = board.size();
        int m = board[0].size();
        int drow[] = {-1,0,1,0};
        int dcol[] = {0,1,0,-1};
        for(int i =0;i<4;++i){
            int nrow = r+drow[i];
            int ncol = c+dcol[i];
            if(nrow >= 0 && nrow<n && ncol>=0 && ncol<m && !vis[nrow][ncol] && board[nrow][ncol] == 'O')
                dfs(nrow,ncol,vis,board);
        }
    }
public:
    void solve(vector<vector<char>>& board) {
        int n = board.size();
        int m = board[0].size();
        vector<vector<int>> vis(n,vector<int>(m,0));
        int j =0;
        for(int i =0;i<n;++i){
            if(board[i][j] == 'O' && !vis[i][j]) dfs(i,j,vis,board);
        }
        j = m-1;
        for(int i =0;i<n;++i){
            if(board[i][j] == 'O' && !vis[i][j]) dfs(i,j,vis,board);
        }
        int i =0;
        for(j=0;j<m;++j){
            if(board[i][j] == 'O' && !vis[i][j]) dfs(i,j,vis,board);
        }
        i = n-1;
        for(j=0;j<m;++j){
            if(board[i][j] == 'O' && !vis[i][j]) dfs(i,j,vis,board);
        }
        for(int l = 0;l<n;++l){
            for(int k =0;k<m;++k){
                if(!vis[l][k] && board[l][k] == 'O') board[l][k] = 'X';
            }
        }
        //return board;
        
    }
};
